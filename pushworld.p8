pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--init
function _init()
	--player
	p=new_p(64,64)
	--world
	map_width=400
	wall_pal={64,65,66,67,68,69}
	walls=gen_world(map_width,0.5)
	moving={}--moving blocks
	--enemies
	enemies={}
	for i=0,30 do
		add(enemies,new_zombie(flr(rnd(map_width)),flr(rnd(map_width))))
	end
	--camera
	c=new_cam(0,0)
end

--camera
function new_cam(x,y)
	c={}
	c.x=x
	c.y=y
	return c
end

--walls (todo height)
function new_wall(n,x,y)
	w={}
	w.n=n
	w.x=x
	w.y=y
	return w
end

--creates a moving wall from a wall block
function new_moving(n,x,y,tx,ty)
	o={}
	o.n=n
	o.x=x
	o.y=y
	o.sx=o.x--start position
	o.sy=o.y
	o.tx=tx	--target x
	o.ty=ty	--target y
	o.p =0  --percentage
	return o
end

--returns a table of walls with defined dimensions
--w   = world width
--num = num of walls
function gen_world(w,perc)
	local arr={}
	for x=0,w do
		arr[x]={}
		for y=0,w do
			if rnd(1)<perc and (x*8!=p.x and y*8!=p.y) then
				local n=rnd(wall_pal)
				--add(arr,new_wall(n,x,y))
				arr[x][y]=n
			else
				arr[x][y]=nil
			end
		end
	end
	return arr
end
-->8
--draw
function _draw()
	cls(1)--blue
	--circfill(64,64,60,3)--green
	circfill(p.x-c.x,p.y-c.y,60,3)--green
	for i=1,5 do--walls
		draw_arr(walls,8,1+i/75)
		draw_moving(moving,8,1+i/75)
	end
	for e in all(enemies) do
		draw_enemy(e)
	end
	draw_player(p)--player
	--draw_selection()
end

--draws objects with depth
--s    =position scale
--depth=perspecive shift scale
function draw_arr(arr,s,depth)
	i=get_irange(c.x,c.y)--we dont want to iterate over entire map
	for x=i.strtx,i.endx do
		for y=i.strty,i.endy do
			if arr[x][y]!=nil then
				local _x=depth*(s*x-c.x-60)+60
				local _y=depth*(s*y-c.y-60)+60
				spr(arr[x][y],_x,_y)
			end
		end
	end
end

function draw_moving(arr,s,depth)
	for o in all(arr) do
		local _x=depth*(s*o.x-c.x-60)+60
		local _y=depth*(s*o.y-c.y-60)+60
		spr(o.n,_x,_y)
	end
end

--draws square in front of player
function draw_selection()
	local pos=p_look_square(p)
	pos.x*=8
	pos.y*=8
	rect(pos.x-c.x,pos.y-c.y,pos.x+8-c.x,pos.y+8-c.y,6)
end
-->8
--update
function _update60()
	--camera
	update_camera()
	--player
	input()
	update_player(p)
	--enemies
	for e in all(enemies) do
		update_enemy(e)
	end
	--moving blocks
	update_moving(moving)
end

function update_camera()
--camera snapping
	local tx=p.x-64+4
	local ty=p.y-64+4
	c.x=lerp(c.x,tx,0.02)
	c.y=lerp(c.y,ty,0.02)
end

--updates all moving blocks
function update_moving(arr)
	for o in all(arr) do
		if o.p<1 then
			--move wall forward
			o.x=lerp(o.sx,o.tx,o.p)
			o.y=lerp(o.sy,o.ty,o.p)
			o.p+=0.1
		else
			--reached target round
			o.x=o.tx
			o.y=o.ty
			--transfer back to walls
			--add(walls,new_wall(o.n,o.x,o.y))
			walls[o.tx][o.ty]=o.n
			del(moving,o)
		end
	end
end
-->8
--player
function new_p(x,y)
	p={}
	p.x=x--position
	p.y=y
	p.w=4
	p.h=4
	p.spdx=0--speed
	p.spdy=0
	p.spd=0
	p.max_spd=1--maxspeed
	p.dir=0
	p.dir_last=0
	p.dir_look=0--direction player is looking
	return p
end

function update_player(p)
	--player movement
	p.spd=p.dir and p.max_spd or 0
	p.spdx=p.spd*cos(p.dir)
	p.spdy=p.spd*sin(p.dir)
	--rounds only when changing dir
	if p.dir!=p.dir_last then
		p.x=round(p.x)
		p.y=round(p.y)
	end
	if p.spd>0 then
		--move player
		p.x+=p.spdx
		p.y+=p.spdy
		--if collision move player back
		i=get_irange(c.x,c.y)--we dont want to iterate over entire map
		for x=i.strtx,i.endx do
			for y=i.strty,i.endy do
				if walls[x][y]!=nil then
					--allows movement along wall
					if box_hit(p.x+(8-p.w)/2,p.y+(8-p.h)/2-p.spdy,p.w,p.h,
																x*8,y*8,8,8) then
						p.x-=p.spdx
					end
					if box_hit(p.x+(8-p.w)/2-p.spdx,p.y+(8-p.h)/2,p.w,p.h,
																x*8,y*8,8,8) then
						p.y-=p.spdy
					end
				end
			end
		end
	end
	--update dir look
	if p.dir!=nil then
		p.dir_look=p.dir--nil wont be stored
	end
	p.dir_last=p.dir
end

function draw_player(p)
	draw_sprite(p.x,p.y,{160,144,128})
end



--returns coords where player is looking
function p_look_square(p)
	local x=round(p.x/8)
	local y=round(p.y/8)
	x+=round(1*cos(p.dir_look))
	y+=round(1*sin(p.dir_look))
	return {x=x,y=y}
end

--dir input for a given player
function get_dir(player_index)
	local p=player_index
	local dirs={nil,0.5,0,nil,0.25,0.375,0.125,nil,0.75,0.625,0.875,nil,nil,nil,nil,nil}
	local dec=0
	for i,b in ipairs({btn(⬅️,p),btn(➡️,p),btn(⬆️,p),btn(⬇️,p)}) do
	dec+=b and (2^(i-1)) or 0
	end
	return dirs[dec+1]
end

--player input
function input()
	--set player direction
	if #moving==0 then
		p.dir=get_dir(0)
	else
		p.dir=nil
	end
	--player push
	if btnp(❎) and #moving==0 then
		pos=p_look_square(p)
		n=walls[pos.x][pos.y]
		while n!=nil do
			local tx=pos.x+round(cos(p.dir_look))
			local ty=pos.y+round(sin(p.dir_look))
			start_move_block(n,pos.x,pos.y,tx,ty)
			pos={x=tx,y=ty}--check next block
			n=walls[pos.x][pos.y]
		end
	end
end

--moves a block
function start_move_block(n,x,y,tx,ty)
	--add block to moving list
	mw=new_moving(n,x,y,tx,ty)
	add(moving,mw)
	--remove block from walls
	walls[x][y]=nil
end
-->8
--util
--rounds value up/down
function round(n)
	return (n%1<0.5) and flr(n) or ceil(n)
end

--calculates offset by depth to position
function depthpos(i,ci,depth)
	return depth*(i-ci-60)+60
end

--smoothing function
function lerp(tar,pos,perc)
	return (1-perc)*tar + perc*pos;
end


--collision overlap function
function box_hit(x1,y1,w1,h1,
 																x2,y2,w2,h2)
	hit=false
	local xd=abs((x1+(w1/2))-(x2+(w2/2)))
	local xs=w1*0.5+w2*0.5
	local yd=abs((y1+(h1/2))-(y2+(h2/2)))
	local ys=h1/2+h2/2
	if xd<xs and 
	yd<ys then 
	hit=true 
	end

	return hit
end

--draws a sprite consisting of ids
function draw_sprite(x,y,ids)
	local inc=0.1--increment
	local depth=1
	for n in all(ids) do
		local _x=depthpos(x,c.x,depth)
		local _y=depthpos(y,c.y,depth)
		spr(n,_x,_y)
		depth+=inc
	end
end

--gets iteration range for performance
function get_irange(x,y)
	pos={}
	pos.strtx=max(0,flr(c.x/8))
	pos.endx =pos.strtx+16
	pos.strty=max(0,flr(c.y/8))
	pos.endy =pos.strty+16
	
	return pos
end
-->8
--enemy
function new_zombie(x,y)
	e={}
	e.nb=161
	e.nm=145
	e.nt=129
	e.x=x
	e.y=y
	e.w=4
	e.h=4
	e.spdx=0--speed
	e.spdy=0
	e.spd=0
	e.max_spd=0.5--maxspeed
	e.dir=0
	e.dir_last=0
	e.dir_look=0--direction player
	e.path="init"
	return e
end

function draw_enemy(e)
	draw_sprite(e.x,e.y,{e.nb,e.nm,e.nt})
end

function set_enemy_path(e)

end

function update_enemy(e)
	--find path
	--set_enemy_path(e)
	e.dir=atan2(p.x-e.x,p.y-e.y)
	--enemy movement
	e.spd=e.dir and e.max_spd or 0
	e.spdx=e.spd*cos(e.dir)
	e.spdy=e.spd*sin(e.dir)
	--rounds only when changing dir
	if e.dir!=e.dir_last then
		e.x=round(e.x)
		e.y=round(e.y)
	end
	if e.spd>0 then
		--move player
		e.x+=e.spdx
		e.y+=e.spdy
		--if collision move player back
		--i=get_irange(e.x-60,e.y-60)--we dont want to iterate over entire map
		--i=get_irange(c.x,c.y)--we dont want to iterate over entire map
		local i={}
		i.strtx=max(0,round(e.x/8)-2)
		i.endx =i.strtx+4
		i.strty=min(0,round(e.y/8)-2)
		i.endy =i.strty+4
		for x=i.strtx,i.endx do
			for y=i.strty,i.endy do
				if walls[x][y]!=nil then
					--allows movement along wall
					if box_hit(e.x+(8-e.w)/2,e.y+(8-e.h)/2-e.spdy,e.w,e.h,
																x*8,y*8,8,8) then
						e.x-=e.spdx
					end
					if box_hit(e.x+(8-e.w)/2-e.spdx,e.y+(8-e.h)/2,e.w,e.h,
																x*8,y*8,8,8) then
						e.y-=e.spdy
					end
				end
			end
		end
	end
	--update dir look
	if e.dir!=nil then
		e.dir_look=e.dir--nil wont be stored
	end
	e.dir_last=e.dir
end
-->8
--pathfinder
function find_path
(start,
 goal,
 estimate,
 edge_cost,
 neighbors, 
 node_to_id, 
 graph)
 
 -- the final step in the
 -- current shortest path
 local shortest, 
 -- maps each node to the step
 -- on the best known path to
 -- that node
 best_table = {
  last = start,
  cost_from_start = 0,
  cost_to_goal = estimate(start, goal, graph)
 }, {}

 best_table[node_to_id(start, graph)] = shortest

 -- array of frontier paths each
 -- represented by their last
 -- step, used as a priority
 -- queue. elements past
 -- frontier_len are ignored
 local frontier, frontier_len, goal_id, max_number = {shortest}, 1, node_to_id(goal, graph), 32767.99

 -- while there are frontier paths
 while frontier_len > 0 do

  -- find and extract the shortest path
  local cost, index_of_min = max_number
  for i = 1, frontier_len do
   local temp = frontier[i].cost_from_start + frontier[i].cost_to_goal
   if (temp <= cost) index_of_min,cost = i,temp
  end
 
  -- efficiently remove the path 
  -- with min_index from the
  -- frontier path set
  shortest = frontier[index_of_min]
  frontier[index_of_min], shortest.dead = frontier[frontier_len], true
  frontier_len -= 1

  -- last node on the currently
  -- shortest path
  local p = shortest.last
  
  if node_to_id(p, graph) == goal_id then
   -- we're done.  generate the
   -- path to the goal by
   -- retracing steps. reuse
   -- 'p' as the path
   p = {goal}

   while shortest.prev do
    shortest = best_table[node_to_id(shortest.prev, graph)]
    add(p, shortest.last)
   end

   -- we've found the shortest path
   return p
  end -- if

  -- consider each neighbor n of
  -- p which is still in the
  -- frontier queue
  for n in all(neighbors(p, graph)) do
   -- find the current-best
   -- known way to n (or
   -- create it, if there isn't
   -- one)
   local id = node_to_id(n, graph)
   local old_best, new_cost_from_start =
    best_table[id],
    shortest.cost_from_start + edge_cost(p, n, graph)
   
   if not old_best then
    -- create an expensive
    -- dummy path step whose
    -- cost_from_start will
    -- immediately be
    -- overwritten
    old_best = {
     last = n,
     cost_from_start = max_number,
     cost_to_goal = estimate(n, goal, graph)
    }

    -- insert into queue
    frontier_len += 1
    frontier[frontier_len], best_table[id] = old_best, old_best
   end -- if old_best was nil

   -- have we discovered a new
   -- best way to n?
   if not old_best.dead and old_best.cost_from_start > new_cost_from_start then
    -- update the step at this
    -- node
    old_best.cost_from_start, old_best.prev = new_cost_from_start, p
   end -- if
  end -- for each neighbor
  
 end -- while frontier not empty

 -- unreachable, so implicitly
 -- return nil
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
166666611f9f9f91166d666116666661166d66611444444100000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662f9f9f9fddd666d633bb6666ddd666d62499999400000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662f9f9f9fd666dd6633b66666d666dd662494449400000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662fff9f9fd6666d66db666666d6666d662494949400000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662f9f9fffd6d666d633666666d6d666d62494949400000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662f9fff9fd66d666dd66663b6d66d666d2494449400000000000000000000000000000000000000000000000000000000000000000000000000000000
d66666662f9f9f9fd66d6666d6633bb6d66d66662499999400000000000000000000000000000000000000000000000000000000000000000000000000000000
1dddddd1122222211dddddd11dddddd11dddddd11222222100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000ff000000bb0000d66676000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ffff0000bbbb005d66666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ffff0000bbbb005d66666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000ff000000bb0005dd6666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000055dddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00dddd0000ddbd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00dddd0000dddb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00dddd0000bddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00dddd0000bbdd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111100001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111110011111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111110011111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111110011111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111110011111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111100001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

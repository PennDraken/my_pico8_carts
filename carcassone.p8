pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--init
function _init()
	tile_width=16
	tile_height=10
	poke(24365,1)--mouse listener
	m=mouse()
	
	tiles=init_tiles()
	tiles_in_hand={}
	for i=0,6 do
		add(tiles_in_hand,rnd(tiles))
	end
	--tiles_in_hand={rnd(tiles)}--tile in hand
	--tiles_in_hand=tiles
	drag_tile=nil
	drag_tile_r=1--rotation of dragged tile TODO use positionable instead
	last_tile=nil--last clicked
	map_width=64
	map_height=64
	map_tiles={}
	map_x=-20
	map_y=-20
	for i=1,map_width do
		add(map_tiles,{})
	end
	for i=1,map_width do
		for j=1,map_width do
			--add(map_tiles,{})
			map_tiles[i][j]=nil
		end
	end
	local start_tile=rnd(tiles)
	local obj=pos_tile(start_tile,0,0,1)
	map_tiles[4][4]=obj--start tile
	--game states
	round_state=1
	current_p=1
	players=4--n of players
end

--base tiles
--tile ids,connections,rotation
function new_tile(sprites, cons, edges)
	tile={
		sprites=sprites,--sprites
		cons=cons,--connections west,north,east,south
		edges=edges,
		draw=function(this,x,y,r)
			rectfill(x,y+6,x+15,y+15,11)
			spr(this.sprites[r],x  ,y)
			spr(this.sprites[r]+1,x+8,y)
			spr(this.sprites[r]+16,x  ,y+8)
			spr(this.sprites[r]+17,x+8,y+8)
		end
	}
	return tile
end

--positions a tile at a position
function pos_tile(tile,x,y,r)
	obj={
		tile=tile,
		x=x,
		y=y,
		r=r,
		--w,n,e,s,center
		meeple=nil,
		meeple_c=nil,--color
		draw=function(this)
			local x=this.x
			local y=this.y
			this.tile:draw(x,y,this.r)
			if this.meeple!=nil then
				--local part=this.meeple
				if this.meeple==1 then
					draw_meeple(x,y+tile_height/2)
				elseif this.meeple==2 then
					draw_meeple(x+tile_width/2,y)
				elseif this.meeple==3 then
					draw_meeple(x+tile_width,y+tile_height/2)
				elseif this.meeple==4 then
					draw_meeple(x+tile_width/2,y+tile_height)
				elseif this.meeple==5 then
					draw_meeple(x+tile_width/2,y+tile_height/2)
				end
			end
		end,
		rotate=function(this)
			if this.r<4 then
				this.r+=1
			else
				this.r=1
			end
		end,
		rotate_meeple=function(this)
			if this.meeple==nil then
				this.meeple=1
			elseif this.meeple<5 then
				this.meeple+=1
			else
				this.meeple=nil--no meeple
			end
			if this.meeple!=nil and this.meeple!=5 then
				local cons=this:get_connections()
				if cons[this.meeple]=="grass" then
					this:rotate_meeple()
				end
			end
		end,
		get_connections=function(this)
			local connections={this.tile.cons[1],this.tile.cons[2],this.tile.cons[3],this.tile.cons[4]}
			--rotate connections
			for i=1,this.r-1 do
				local temp = connections[4]
				-- south = east
				connections[4] = connections[3]
				-- east = north
				connections[3] = connections[2]
				-- north = west
				connections[2] = connections[1]
				-- west = south
				connections[1] = temp
			end
			return connections
		end
	}
	return obj
end

--meeple
function meeple(pnum)
	local o
	o.pnum=pnum
	return o
end

--button
function button(n,x,y,w,h)
	b={}
	b.n=n
	b.x=x
	b.y=y
	b.w=w
	b.h=h
	b.on_click=function(this)

	end
	b.draw=function(this)
		
	end
	return b
end

--tile connection types
city="city"
grass="grass"
road="road"

--create custom tiles
function init_tiles()
	tiles={
	new_tile({0,2,4,6}, {grass,grass,city,city}, {nil, nil, 3, 4}),--for every corner we store connecting edges
	new_tile({8,10,12,14}, {grass,grass,city,grass}),
	new_tile({36,38,40,42}, {road,grass,grass,road}),
	new_tile({44,46,44,46}, {city,grass,city,grass}),
	new_tile({32,34,32,34}, {road,grass,road,grass}),
	new_tile({64,64,64,64}, {city,city,city,city}),
	new_tile({96,98,100,102}, {road,grass,city,grass}),
	new_tile({66,66,66,66}, {grass,grass,grass,grass}),
	new_tile({68,68,68,68}, {road,road,road,road}),
	new_tile({104,106,108,110}, {road,grass,road,road}),								
	new_tile({72,74,76,78}, {road,road,city,city}),								
	new_tile({128,130,132,134}, {road,grass,grass,grass}),									
	new_tile({136,138,140,142}, {city,grass,city,city})									

	}
	return tiles
end

function mouse()
	m={}
	m.x=0
	m.y=0
	m.oldx=0
	m.oldy=0
	m.dx=0
	m.dy=0
	m.lclick=false
	m.lheld=false
	m.draw=function(this)
		if this.lclick or this.lheld then
			spr(208,this.x,this.y)
		else
			spr(192,this.x,this.y)
		end
	end
	
	m.update=function(this)
		this.x=stat(32)
		this.y=stat(33)
		this.dx=this.x-this.oldx
		this.dy=this.y-this.oldy
		if stat(34)==1 then
			if this.lclick==false and this.lheld==false then
				this.lclick=true
			elseif this.lclick==true then
				this.lclick=false
				this.lheld=true
			end
		else
			this.lclick=false
			this.lheld=false
		end
		this.oldx=this.x
		this.oldy=this.y
	end

	return m
end
-->8
--draw
function _draw()
	if round_state==1 then
		draw_state_tile()
	elseif round_state==2 then
		draw_state_meeple()
	end
end

--tile place view
function draw_state_tile()
	cls(1)
	rectfill(map_x+32,map_y+tile_height*1,128,128,0)--ui bottom black rectangle
	--draw_grid()
	draw_tile_map()
	rectfill(0,128-16,128,128,0)--ui bottom black rectangle
	draw_tiles_in_hand()
	--adaptive ui
	draw_dragging_tile()
	draw_selected_ui()
	m:draw()
end

--meeple place view
function draw_state_meeple()
	cls(1)
	rectfill(map_x+32,map_y+tile_height*1,128,128,0)--ui bottom black rectangle
	draw_tile_map()
	--higlight tile
	local pos=x_y_to_mx_my(m.x-map_x,m.y-map_y)
	local x=(pos[1]*tile_width)+map_x
	local y=(pos[2]*tile_height)+map_y
	rect(x,y, x+tile_width, y+tile_height,6)--highlight square
	--meeple placement highlight
	local part=tile_part_sel()
	?part,8,8,7
	if part==1 then
		--draw_meeple(x,y+tile_height/2)
	elseif part==2 then
		--draw_meeple(x+tile_width/2,y)
	elseif part==3 then
		--draw_meeple(x+tile_width,y+tile_height/2)
	elseif part==4 then
		--draw_meeple(x+tile_width/2,y+tile_height)
	elseif part==5 then
		--draw_meeple(x+tile_width/2,y+tile_height/2)
	end
	--draw
	draw_selected_ui()
	print("place meeples",0,0,7)
	m:draw()
end

--draws meeple offset
function draw_meeple(x,y)
	spr(195,x-3,y-8)
end

function draw_tile_meeple(x,y,part)
	if part==1 then
		draw_meeple(x,y+tile_height/2)
	elseif part==2 then
		draw_meeple(x+tile_width/2,y)
	elseif part==3 then
		draw_meeple(x+tile_width,y+tile_height/2)
	elseif part==4 then
		draw_meeple(x+tile_width/2,y+tile_height)
	elseif part==5 then
		draw_meeple(x+tile_width/2,y+tile_height/2)
	end
end

--where the mouse is placed on tile
--used for meeple placement
function tile_part_sel()
	local pos=x_y_to_mx_my(m.x-map_x,m.y-map_y)
	local x=(pos[1]*tile_width)+map_x
	local y=(pos[2]*tile_height)+map_y
	--distances
	local dw=abs(x-m.x)
	local dn=abs(y-m.y)
	local de=abs(x+tile_width-m.x)
	local ds=abs(y+tile_height-m.y)
	local x0=x+tile_width/2
	local y0=y+tile_height/2
	local dcentre=sqrt((x0-m.x)^2+(y0-m.y)^2)
	--find value to return: 1,2,3,4,5
	local min_distance = min_table({dw,dn,de,ds,dcentre})
	if min_distance == dcentre then
  return 5  -- center of the tile
 elseif min_distance == dw then
  return 1  -- north edge of the tile
 elseif min_distance == dn then
  return 2  -- east edge of the tile
 elseif min_distance == de then
  return 3  -- south edge of the tile
 else
  return 4  -- west edge of the tile
 end
end

function draw_dragging_tile()
	if drag_tile!=nil then
		drag_tile:draw(m.x,m.y,1)
		--draw highlight
		local pos=x_y_to_mx_my(m.x-map_x,m.y-map_y)
		local x=(pos[1]*tile_width)+map_x
		local y=(pos[2]*tile_height)+map_y
		rect(x,y, x+tile_width, y+tile_height,7)--highlight square
	end
end

--draws ui for selected tile
function draw_selected_ui()
	if last_tile!=nil then
		--find tile in map
		for i=1,map_width do
			for j=1,map_height do
				if map_tiles[i][j]==last_tile then
					local x=i*tile_width+map_x
					local y=j*tile_height+map_y
					cons=map_tiles[i][j]:get_connections()
					--?cons[1],7
					--?cons[2],7
					--?cons[3],7
					--?cons[4],7
					if check_tile_valid(i,j) then
						rect(x,y, x+tile_width, y+tile_height,7)--last tile border
					else
						rect(x,y, x+tile_width, y+tile_height,8)--last tile border
					end
					spr(193,x+16,y+16)--rotate symbol
					spr(194,x+24,y+16)--verify/ apply symbol
					break
				end
			end
		end
	end
end

--draws the tiles that can be dragged
function draw_tiles_in_hand()
	for i,tile in pairs(tiles_in_hand) do
		local y=128-16
		tile:draw((i-1)*16,y,1)
	end
end

--draws all tiles placed on map
function draw_tile_map()
	for i=1,map_height do
		for j=1,map_width do
			local x=(i*tile_width)+map_x
			local y=(j*tile_height)+map_y
			local obj=map_tiles[i][j]
			if obj!=nil then
				local tile=obj.tile
				local yoffs=16-tile_height
				tile:draw(x,y-yoffs,obj.r)
				if obj.meeple!=nil then
					draw_tile_meeple(x,y,obj.meeple)
				end
			end
		end
	end
end

--grid
function draw_grid()
	for i=1,map_height do
		for j=1,map_width do
			local x=(i*tile_width)+map_x
			local y=(j*tile_height)+map_y
			rect(x,y,x+tile_width,y+tile_height,1)
		end
	end
end

-->8
--update
function _update()
	if round_state==1 then
		update_state_tile()
	elseif round_state==2 then
		update_state_meeple()
	end
end

function update_state_tile()
	m:update()
	if stat(34)==1 then
		if m.lclick then
			check_click_tile()
			check_click_rotate()
			check_click_apply()
		end
		if drag_tile==nil then
			map_x+=m.dx
			map_y+=m.dy
		end
	else
		--l click release
		if drag_tile!=nil and m.y<112 then
			--place tile
			obj=pos_tile(drag_tile,m.x-map_x,m.y-map_y,drag_tile_r)
			local mcoords=x_y_to_mx_my(obj.x,obj.y)
			local mx=mcoords[1]
			local my=mcoords[2]
			if map_tiles[mx][my]==nil then
				map_tiles[mx][my]=obj
				last_tile=obj
				drag_tile=nil--reset dragging tile	
			else
				add(tiles_in_hand,drag_tile)
				drag_tile=nil
			end
		elseif drag_tile!=nil then
			add(tiles_in_hand,drag_tile)
			drag_tile=nil
		end
	end
end

function update_state_meeple()
	m:update()
	if stat(34)==1 then
		if m.lclick then
			--place meeple
			--find tile
			check_click_rotate()
			check_click_apply()
		else
			map_x+=m.dx
			map_y+=m.dy
		end
	end
end

--convers from pixel coords to map index coords
function x_y_to_mx_my(x,y)
	local mx=flr(x/tile_width)
	local my=flr(y/tile_height)
	return {mx,my}
end

function check_click_tile()
	if (drag_tile!=nil) return
	--menu
	for i,tile in pairs(tiles_in_hand) do
		x=(i-1)*16
		y=128-16
		if m.x>x and m.x<x+16 and
					m.y>y and m.y<y+16 then
			drag_tile=tile
			del(tiles_in_hand,drag_tile)
			drag_tile_r=1
			return
		end
	end
	--map
	for i=1,map_height do
		for j=1,map_width do
			local x=i*tile_width+map_x
			local y=j*tile_height+map_y
			local obj=map_tiles[i][j]
			if obj==last_tile and last_tile!=nil then
				if m.x>x and m.x<x+tile_width and
					m.y>y and m.y<y+tile_height then
					drag_tile=obj.tile
					drag_tile_r=obj.r
					map_tiles[i][j]=nil
					return
				end
			end
		end
	end		
end

--rotates selected tile
function check_click_rotate()
	if last_tile!=nil then
		for i=1,map_width do
			for j=1,map_height do
				if map_tiles[i][j]==last_tile then
					local x=i*tile_width+map_x+16
					local y=j*tile_height+map_y+16
					if m.x>x and m.x<x+8 and
								m.y>y and m.y<y+8 then
						if round_state==1 then
							last_tile:rotate()
						elseif round_state==2 then
							last_tile:rotate_meeple()
						end
					end
				end
			end
		end
	end
end



--apply placement
function check_click_apply()
	if last_tile!=nil then
		for i=1,map_width do
			for j=1,map_height do
				if map_tiles[i][j]==last_tile then
					local x=i*tile_width+map_x+24
					local y=j*tile_height+map_y+16
					if m.x>x and m.x<x+8 and
								m.y>y and m.y<y+8 then
						if round_state==1 then
							--finish_placement()
							finish_round()
						elseif round_state==2 then
							last_tile=nil
							finish_round()
						end
					end
				end
			end
		end
	end
end

function finish_round()
	if round_state==1 then
		round_state=2
	elseif round_state==2 then
		round_state=1
	end
end

--finishes placement of a tile
function finish_placement()
	for i=1,map_width do
		for j=1,map_height do
			if map_tiles[i][j]==last_tile and last_tile!=nil then
				if check_tile_valid(i,j) then
					last_tile=nil
					pickup_new_tile()	
				end
			end
		end
	end
end

--cheks if tile at mx my is valid
function check_tile_valid(mx,my)
	local connections = map_tiles[mx][my]:get_connections()

	--neighbor tiles
	local tile_w = map_tiles[mx-1][my]
	local tile_n = map_tiles[mx][my-1]
	local tile_e = map_tiles[mx+1][my]
	local tile_s = map_tiles[mx][my+1]
	--collision check
	if tile_w~=nil then
		local connections_w = tile_w:get_connections()
		if (connections_w[3]~=connections[1]) return false
	end
	if tile_n~=nil then
		local connections_n = tile_n:get_connections()
		if (connections_n[4]~=connections[2]) return false
	end
	if tile_e~=nil then
		local connections_e = tile_e:get_connections()
		if (connections_e[1]~=connections[3]) return false
	end
	if tile_s~=nil then
		local connections_s = tile_s:get_connections()
		if (connections_s[2]~=connections[4]) return false
	end
	--no neighbours
	if tile_w==nil and tile_e==nil and tile_n==nil and tile_s==nil then
		return false
	else
		return true
	end
end

--run when you want player to pickup a random tile
function pickup_new_tile()
	add(tiles_in_hand,rnd(tiles))
end


-->8
--util
function min_table(numbers)
 local min_value = numbers[1]  -- initialize min_value with the first element of the table
 for i = 2, #numbers do
  if numbers[i] < min_value then
      min_value = numbers[i]
  end
 end
 return min_value
end
__gfx__
00000000000001c001c000000000000000000000000001c00c1000000000000000000000000dc0000000000000000000000dc000000000000000000000000000
00000000000011cc11cc00000000000000000000000011cccc110000000000000000000000ddcc00000000000000000000ddcc00000000000000000000000000
0000000000001ccc1ccc0000000000000000000000001cccccc10000000000000000000000dccc77000000000000000077dccc00000000007700000000000077
0000000000077cc77cc77000000000000000000000077cc77cc770000000000000000000006cc7770000000000000000777cc6000000000077dc00000000dc77
00000000007767777776770000000000000000000077677777767700000000000000000000677766000000000000000066777600000000007ddcc888888ddcc7
00000000077667777776677000000000000000000776677777766770000000000000000000777766000000000000000066777700000000006dccc788887dccc6
000000007766877887786677000000008888888877660770077066778888888800000000077768880000000000000000888677700000000066cc77777776cc76
0000000776688888888886677000000088888887766000000000066778888888000000000776688800dc00000000dc0088866770000000000677767777667770
000000776688888888888866770000008888887766000000000000667788888800000000077688880ddcc077770ddcc088886770000000000677766666667770
01c007766888888888888886677001c081c88776600000000000000667788c1800000000077dc8886dccc777777dccc0888dc770000000000077006666007700
11cc77668888888888888888667711cc11cc776600000000000000006677cc110000000007ddcc8866cc77666676cc7088ddcc70000000000000000000000000
1ccc7668888888888888888886671ccc1ccc766000000000000000000667ccc10000000007dccc77067776666666777077dccc70000000000000000000000000
6cc76688888888888888888888667cc66cc76600000000000000000000667cc600000000066cc7770677768888667770777cc660000000000000000000000000
67776888888888888888888888867776677760000000000000000000000677760000000006677766007788888888770066777660000000000000000000000000
67778888888888888888888888887776677700000000000000000000000077760000000000677766077688888888677066777600000000000000000000000000
07788888888888888888888888888771177000000000000000000000000007710000000000077006776688888888667760077000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000dc000dc0000000000dc0
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000711cc000000ddcc7ddcc00000000ddcc
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071ccc700007dccc7dccc00000000dccc
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066cc77777776cc767cc6000000006cc7
0000000000000000000000000000000000000000000000000000000dd00000000000000dd0000000000000000000000066777677776677767776000000006777
00000000000000000000000dd000000000000000000000000000000dd00000000000000dd0000000000000000000000086777666666677787777888888887777
000000000000000000000000dd00000000000000000000000000000dd00000000000000dd0000000000000000000000088778866668877880677788888877760
0000ddddd000000000000000dd0000000000000000000000000000ddd00000000000000ddd0000000000000000dddddd88888888888888880667788888877660
ddddddddddd000dd0000000dd0000000dddddd0000000000dddddddd0000000000000000dddddddd00000000dddddddd88dc88888888dc880dc7788888877dc0
dddd00000ddddddd0000000dd0000000dddddddd00000000ddddddd000000000000000000ddddddd00000000ddd000008ddcc877778ddcc8ddcc78888887ddcc
00000000000ddd00000000dd0000000000000ddd00000000000000000000000000000000000000000000000ddd0000008dccc777777dccc8dccc78888887dccc
0000000000000000000000dd00000000000000ddd0000000000000000000000000000000000000000000000dd000000076cc77666676cc777cc6688888866cc7
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000076777666666677777776688888866777
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000066777600006677767776888888886777
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000060770000000077060778888888888770
000000000000000000000000000000000000000000000000000000000000000000000000000001c001c000000000000000000000000001c001c0000000000000
000000000000000000000002000000000000000000000000000000020000000000000000000011cc11cc00000000000000000000000011cc11cc000000000000
00000000000000000000002220000000000000000000000000000022200000000000000000001ccc1ccc0000000000000000000000001ccc1ccc000000000000
00000000000000000000000200000000000000000000000000000002000000000000000000077cc77cc77000000000000000000000077cc76cc7700000000000
00000000000000000000004880000000000000000000000000000048800000000000000000776776677677000000000000000000007767776776770000000000
0000000000000000000004488800000000000000000080000000044888000000000000dd0776677667766770dd00000000000000077667776776677000000000
888888888888888800004448880000000000000dd0048800000044488800000000000dd077668778877866770dd0000088888888776607700770667788888888
8888888888888888000444488740000000a00800dd06870000044448874000000ddddd07766888888888866770dddd0088888887766000000000066778888888
8888888888888888000446487744800000004880dd0677000004464877448000ddddd0776688888888888866770ddddd88888877660000000000006677888888
88888888888888880006466777448800dd00687dd00070dd0006466777448800d00007766888888888888886677000dd81c88776600000dddd000006677881c8
88888888888888880006666727448700ddd0677ddddddddd00066667274487000000776688888888888888886677000011cc7766000dddddddd00000667711cc
888888888888888800006667776477000dd007ddd00ddd000000666777647700000776688888888888888888866770001ccc766000dd000000dd000006671ccc
8888888888888888000006672766770000dddddd000a00000000066727667700007766888888888888888888886677006cc766000dd00000000ddd0000666cc7
88888888888888880000006720667000000dd00dd0a0a000000000672066700007766888888888888888888888866770677760000d00000000000dd000066777
888888888888888800000007000600000a00000dd00a000000000007000600007766888888888888888888888888667767770000dd000000000000dd00006777
888888888888888800000000000000000000000dd00000000000000000000000766888888888888888888888888886671770000dd0000000000000ddd0000770
000000000001c00000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000011cc0000000000000000000011cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001ccc770000000000000000771ccc000000000077000000000000770000000000000000000000000000000000000000000000000000000000000000
00000000006cc7770000000000000000777cc60000000000771c000000001c770000000000000000000000000000000000000000000000000000000000000000
000000000067776600000000000000006677760000000000711cc88888811cc70000000000000000000000000000000000000000000000000000000000000000
00000000007777660000000dd0000000667777000000000061ccc7888871ccc6000000000000000000000000000000000000000dd00000000000000000000000
00000000077768880000000dd0000000888677700000000066cc77777776cc7600000000000000000000000dd00000000000000dd00000000000000dd0000000
0000000007766888001c000dd0001c0088866770000000000677767777667770000000000000000000000000dd0000000000000dd0000000000000dd00000000
0000000007768888011cc07777011cc08888677ddddddddd06777664466677700000ddddd000000000000000dd0000000000ddddd0000000000000dd00000000
ddddddddd771c88801ccc7777771ccc08881c77ddddddddd0077006446007700ddddddddddd000ddddddddddd0000000ddddddddddd000dd0000000dddd00ddd
ddddddddd711cc8806cc77666676cc708811cc70000000000000000dd0000000dddd00ddddddddddddddddddd0000000dddd00dddddddddd0000000ddddddddd
00000000071ccc770677766666667770771ccc70000000000000000dd00000000000000dd00ddd00000000dd0000000000000000000ddd0000000000dd0ddd00
00000000066cc7777777768888667777777cc660000000000000000dd00000000000000dd0000000000000dd00000000000000000000000000000000dd000000
0000000006677766777788888888777766777660000000000000000dd00000000000000dd00000000000000dd000000000000000000000000000000dd0000000
0000000000677766666688888888666666777600000000000000000dd00000000000000dd00000000000000dd000000000000000000000000000000dd0000000
0000000000077000666888888888866600077000000000000000000dd00000000000000dd00000000000000dd000000000000000000000000000000dd0000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000dd0000000000000000000000000000044880080007770000000000777000000000000077700000000000000007770000000000000
00000000000048000000000dd0000000008400000000000000000044880489007777000000007777000000000000777700000000000000007777000000000000
00000000000448800000000dd00000000884400000a00000000000648704790066677001c0077666888888888887766688888881c88888886667788888888888
0000000000044880000000dd000000000884400000003000000000667707770088667711cc77668888888888881c666688888811cc88888866661c8888888888
0000ddddd00648700000ddd0000000000784600ddddd000000000062270777008886661ccc66688888888888811cc0008888871ccc78888800011cc888888888
ddddddddddd66770000ddd048000000007766ddddddddddd00000002200000008888666cc66688888888888881ccc0008888776cc77788880001ccc888888888
dddd00000dd66770000dd0448800000007766dd03000dddd0000000dd000000088888867768888888888888886cc000088877667776778880000cc6888888888
0000000000006700000dd044880000000076000000000000000000dd000000008888888778888888888888888667700088776667776677880007766888888888
0000000000000000000dd064870000000000000000a00000000000dd000000008888888888888888888888888866777777766007700667777777668888888888
0000000000000000000ddd6677000000000000a0000000000000000dd00000008888888888888888888888888886677777660000000066777776688888888888
00000000000000000000dd667700000000000000300000000000000dd00000008888888888888888888888888888666666600000000006666666888888888888
0000000000000000000000067000000000000000000000000000000dd00000008888888888888888888888888888866666000000000000666668888888888888
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01110000111111111111111100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17771000117117771111111100000000001710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17711000177711171111111700010000017771000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17171000717171171111117100171000171717100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111000117111171711171101777100011711000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000117111171171711100171000017171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000117777771117111101717100017171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111111111111100333000003330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

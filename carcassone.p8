pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--init
function _init()
	tile_width=16
	tile_height=10
	poke(24365,1)
	m=mouse()
	tile_options=init_tiles()
	drag_tile=nil
	drag_tile_r=1--rotation of dragged tile TODO use positionable instead
	last_tile=nil--last clicked
	map_width=64
	map_height=64
	map_tiles={}
	map_x=0
	map_y=0
	for i=1,map_width do
		add(map_tiles,{})
	end
	for i=1,map_width do
		for j=1,map_width do
			--add(map_tiles,{})
			map_tiles[i][j]=nil
		end
	end
end

--base tiles
--tile ids,connections,rotation
function new_tile(sprites,cons)
	tile={
		sprites=sprites,--sprites
		cons=cons,--connections west,north,east,south
		draw=function(this,x,y,r)
			spr(this.sprites[r],x  ,y)
			spr(this.sprites[r]+1,x+8,y)
			spr(this.sprites[r]+16,x  ,y+8)
			spr(this.sprites[r]+17,x+8,y+8)
		end
	}
	return tile
end

--positions a tile at a position
function pos_tile(tile,x,y,r)
	obj={
		tile=tile,
		x=x,
		y=y,
		r=r,
		draw=function(this)
			this.tile:draw(this.x,this.y,this.r)
		end,
		rotate=function(this)
			if this.r<4 then
				this.r+=1
			else
				this.r=1
			end
		end,
		get_connections=function(this)
			local connections={this.tile.cons[1],this.tile.cons[2],this.tile.cons[3],this.tile.cons[4]}
			--rotate connections
			for i=1,this.r-1 do
				local temp = connections[4]
				-- south = east
				connections[4] = connections[3]
				-- east = north
				connections[3] = connections[2]
				-- north = west
				connections[2] = connections[1]
				-- west = south
				connections[1] = temp
			end
			return connections
		end
	}
	return obj
end

--tile connection types
city="city"
grass="grass"
road="road"

--create custom tiles
function init_tiles()
	tiles={
	new_tile({0,2,4,6},
										{grass,grass,city,city}),
	new_tile({8,10,12,14},
										{grass,grass,city,grass}),
	new_tile({36,38,40,42},
										{road,grass,grass,road}),
	new_tile({44,46,44,46},
										{city,grass,city,grass}),
	new_tile({32,34,32,34},
										{road,grass,road,grass}),
	new_tile({64,64,64,64},
										{city,city,city,city}),
	new_tile({96,98,100,102},
										{city,city,city,city}),
	new_tile({66,66,66,66},
										{grass,grass,grass,grass})
	}
	
	
	return tiles
end

function mouse()
	m={}
	m.x=0
	m.y=0
	m.oldx=0
	m.oldy=0
	m.dx=0
	m.dy=0
	m.lclick=false
	m.lheld=false
	m.draw=function(this)
		spr(192,this.x,this.y)
	end
	
	m.update=function(this)
		this.x=stat(32)
		this.y=stat(33)
		this.dx=this.x-this.oldx
		this.dy=this.y-this.oldy
		if stat(34)==1 then
			if this.lclick==false and this.lheld==false then
				this.lclick=true
			elseif this.lclick==true then
				this.lclick=false
				this.lheld=true
			end
		else
			this.lclick=false
			this.lheld=false
		end
		this.oldx=this.x
		this.oldy=this.y
	end

	return m
end
-->8
--draw
function _draw()
	cls(11)
	--draw_grid()
	if drag_tile!=nil then
		drag_tile:draw(m.x,m.y,1)
		--draw highlight
		local pos=x_y_to_mx_my(m.x-map_x,m.y-map_y)
		local x=(pos[1]*tile_width)+map_x
		local y=(pos[2]*tile_height)+map_y
		rect(x,y, x+tile_width, y+tile_height,7)--highlight square
	end
	if last_tile!=nil then
		--find tile in map
		for i=1,map_width do
			for j=1,map_height do
				if map_tiles[i][j]==last_tile then
					local x=i*tile_width+map_x
					local y=j*tile_height+map_y
					--?map_tiles[i][j].r,7
					cons=map_tiles[i][j]:get_connections()
					?cons[1],7
					?cons[2],7
					?cons[3],7
					?cons[4],7

					if check_tile_valid(i,j) then
						rect(x,y, x+tile_width, y+tile_height,7)--last tile border
					else
						rect(x,y, x+tile_width, y+tile_height,8)--last tile border
					end
					spr(193,x+16,y+16)--rotate symbol
					break
				end
			end
		end
	end
	draw_tile_map()

	rectfill(0,128-16,128,128,0)--ui bottom black rectangle
	draw_tile_options()
	m:draw()
end

--draws the tiles that can be dragged
function draw_tile_options()
	for i,tile in pairs(tile_options) do
		local y=128-16
		tile:draw((i-1)*16,y,1)
	end
end

--draws all tiles placed on map
function draw_tile_map()
	for i=1,map_height do
		for j=1,map_width do
			local x=(i*tile_width)+map_x
			local y=(j*tile_height)+map_y
			local obj=map_tiles[i][j]
			if obj!=nil then
				local tile=obj.tile
				local yoffs=16-tile_height
				tile:draw(x,y-yoffs,obj.r)
			end
		end
	end
end

--grid
function draw_grid()
	for i=1,map_height do
		for j=1,map_width do
			local x=(i*tile_width)+map_x
			local y=(j*tile_height)+map_y
			rect(x,y,x+tile_width,y+tile_height,1)
		end
	end
end

-->8
--update
function _update()
	m:update()
	if stat(34)==1 then
		if m.lclick then
			check_click_tile()
			check_click_rotate()
		end
		if drag_tile==nil then
			map_x+=m.dx
			map_y+=m.dy
		end
	else
		--l click release
		if drag_tile!=nil and m.y<112 then
			--place tile
			obj=pos_tile(drag_tile,m.x-map_x,m.y-map_y,drag_tile_r)
			local mcoords=x_y_to_mx_my(obj.x,obj.y)
			local mx=mcoords[1]
			local my=mcoords[2]
			map_tiles[mx][my]=obj
			last_tile=obj
		end
		drag_tile=nil--reset dragging tile
	end
end

--convers from pixel coords to map index coords
function x_y_to_mx_my(x,y)
	local mx=flr(x/tile_width)
	local my=flr(y/tile_height)
	return {mx,my}
end

function check_click_tile()
	if (drag_tile!=nil) return
	--menu
	for i,tile in pairs(tile_options) do
		x=(i-1)*16
		y=128-16
		if m.x>x and m.x<x+16 and
					m.y>y and m.y<y+16 then
			drag_tile=tile
			drag_tile_r=1
			return
		end
	end
	--map
	for i=1,map_height do
		for j=1,map_width do
			local x=i*tile_width+map_x
			local y=j*tile_height+map_y
			local obj=map_tiles[i][j]
			if obj!=nil then
				if m.x>x and m.x<x+tile_width and
					m.y>y and m.y<y+tile_height then
					drag_tile=obj.tile
					drag_tile_r=obj.r
					map_tiles[i][j]=nil
					return
				end
			end
		end
	end		
end

--rotates selected tile
function check_click_rotate()
	if last_tile!=nil then
		for i=1,map_width do
			for j=1,map_height do
				if map_tiles[i][j]==last_tile then
					local x=i*tile_width+map_x+16
					local y=j*tile_height+map_y+16
					if m.x>x and m.x<x+8 and
								m.y>y and m.y<y+8 then
						last_tile:rotate()
					end
				end
			end
		end
	end
end

--cheks if tile at mx my is valid
function check_tile_valid(mx,my)
	local connections = map_tiles[mx][my]:get_connections()

	--neighbor tiles
	local tile_w = map_tiles[mx-1][my]
	local tile_n = map_tiles[mx][my-1]
	local tile_e = map_tiles[mx+1][my]
	local tile_s = map_tiles[mx][my+1]
	--collision check
	if tile_w~=nil then
		local connections_w = tile_w:get_connections()
		if (connections_w[3]~=connections[1]) return false
	end
	if tile_n~=nil then
		local connections_n = tile_n:get_connections()
		if (connections_n[4]~=connections[2]) return false
	end
	if tile_e~=nil then
		local connections_e = tile_e:get_connections()
		if (connections_e[1]~=connections[3]) return false
	end
	if tile_s~=nil then
		local connections_s = tile_s:get_connections()
		if (connections_s[2]~=connections[4]) return false
	end
	return true
end


__gfx__
0000000000000dc00dc00000000000000000000000000dc00cd000000000000000000000000dc0000000000000000000000dc000000000000000000000000000
000000000000ddccddcc000000000000000000000000ddccccdd0000000000000000000000ddcc00000000000000000000ddcc00000000000000000000000000
000000000000dcccdccc000000000000000000000000dccccccd0000000000000000000000dccc77770000000000007777dccc00000000000000000000000000
0000000000077cc77cc77000000000000000000000077cc77cc770000000000000000000006cc77777dc00000000dc77777cc600000000000000000000000000
000000000077677777767700000000000000000000776777777677000000000000000000006777667ddcc888888ddcc766777600000000000000000000000000
000000000776677777766770000000000000000007766777777667700000000000000000007777666dccc788887dccc666777700000000000000000000000000
0000000077668778877866770000000088888888776607700770667788888888000000000777688866cc77777776cc7688867770000000000000000000000000
000000077668888888888667700000008888888776600000000006677888888800000000077668880677767777667770888667700000000000dc00000000dc00
00000077668888888888886677000000888888776600000000000066778888880000000007768888067776666666777088886770000000000ddcc077770ddcc0
0dc00776688888888888888667700dc08dc88776600000000000000667788cd800000000077dc8880077006666007700888dc770000000006dccc777777dccc0
ddcc776688888888888888886677ddccddcc776600000000000000006677ccdd0000000007ddcc88000000000000000088ddcc700000000066cc77666676cc70
dccc766888888888888888888667dcccdccc766000000000000000000667cccd0000000007dccc77000000000000000077dccc70000000000677766666667770
6cc76688888888888888888888667cc66cc76600000000000000000000667cc600000000066cc7770000000000000000777cc660000000000677768888667770
67776888888888888888888888867776677760000000000000000000000677760000000006677766000000000000000066777660000000000077888888887700
67778888888888888888888888887776677700000000000000000000000077760000000000677766000000000000000066777600000000000776888888886770
07788888888888888888888888888771177000000000000000000000000007710000000000077000000000000000000000077000000000000776888888886770
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dc00000000dc000dc0000000000dc0
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ddcc000000ddcc7ddcc00000000ddcc
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007dccc700007dccc7dccc00000000dccc
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066cc77777776cc767cc6000000006cc7
0000000000000000000000000000000000000000000000000000000dd00000000000000dd0000000000000000000000066777677776677767776000000006777
00000000000000000000000dd000000000000000000000000000000dd00000000000000dd0000000000000000000000086777666666677787777888888887777
000000000000000000000000dd00000000000000000000000000000dd00000000000000dd0000000000000000000000088778866668877880677788888877760
0000ddddd000000000000000dd0000000000000000000000000000ddd00000000000000ddd0000000000000000dddddd88888888888888880667788888877660
ddddddddddd000dd0000000dd0000000dddddd0000000000dddddddd0000000000000000dddddddd00000000dddddddd88dc88888888dc880dc7788888877dc0
dddd00000ddddddd0000000dd0000000dddddddd00000000ddddddd000000000000000000ddddddd00000000ddd000008ddcc877778ddcc8ddcc78888887ddcc
00000000000ddd00000000dd0000000000000ddd00000000000000000000000000000000000000000000000ddd0000008dccc777777dccc8dccc78888887dccc
0000000000000000000000dd00000000000000ddd0000000000000000000000000000000000000000000000dd000000076cc77666676cc777cc6688888866cc7
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000076777666666677777776688888866777
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000066777600006677767776888888886777
00000000000000000000000dd00000000000000dd0000000000000000000000000000000000000000000000dd000000060770000000077060778888888888770
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000002220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000004880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000044888000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000
888888888888888800004448880000000000000dd004880000000000000000000000000000000000000000000000000000000000000000000000000000000000
8888888888888888000444488740000000a00800dd06870000000000000000000000000000000000000000000000000000000000000000000000000000000000
8888888888888888000446487744800000004880dd06770000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888888888880006466777448800dd00687dd00070dd00000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888888888880006666727448700ddd0677ddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
888888888888888800006667776477000dd007ddd00ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
8888888888888888000006672766770000dddddd000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888888888880000006720667000000dd00dd0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000
888888888888888800000007000600000a00000dd00a000000000000000000000000000000000000000000000000000000000000000000000000000000000000
888888888888888800000000000000000000000dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000dc0000000000000000000000dc000000000000000000dd00000000000000000000000000000000000000000000000000000000000000000000000
0000000000ddcc00000000000000000000ddcc00000000000000000dd00000000000000000000000000000000000000000000000000000000000000000000000
0000000000dccc77770000000000007777dccc00000000000000000dd00000000000000000000000000000000000000000000000000000000000000000000000
00000000006cc77777dc00000000dc77777cc600000000000000000dd00000000000000000000000000000000000000000000000000000000000000000000000
00000000006777667ddcc888888ddcc766777600000000000000000dd00000000000000000000000000000000000000000000000000000000000000000000000
00000000007777666dccc788887dccc666777700000000000000000dd0000000000000000000000000000000000000000000000dd00000000000000000000000
000000000777688866cc77777776cc7688867770000000000000000dd000000000000000000000000000000dd00000000000000dd00000000000000dd0000000
00000000077668880677767777667770888667700000000000dc000dd000dc00000000000000000000000000dd0000000000000dd0000000000000dd00000000
000000000776888806777664466677708888677ddddddddd0ddcc077770ddcc00000ddddd000000000000000dd0000000000ddddd0000000000000dd00000000
ddddddddd77dc8880077006446007700888dc77ddddddddd6dccc777777dccc0ddddddddddd000ddddddddddd0000000ddddddddddd000dd0000000dddd00ddd
ddddddddd7ddcc880000000dd000000088ddcc700000000066cc77666676cc70dddd00ddddddddddddddddddd0000000dddd00dddddddddd0000000ddddddddd
0000000007dccc770000000dd000000077dccc700000000006777666666677700000000dd00ddd00000000dd0000000000000000000ddd0000000000dd0ddd00
00000000066cc7770000000dd0000000777cc6600000000006777688886677700000000dd0000000000000dd00000000000000000000000000000000dd000000
00000000066777660000000dd0000000667776600000000000778888888877000000000dd00000000000000dd000000000000000000000000000000dd0000000
00000000006777660000000dd0000000667776000000000007768888888867700000000dd00000000000000dd000000000000000000000000000000dd0000000
00000000000770000000000dd0000000000770000000000007768888888867700000000dd00000000000000dd000000000000000000000000000000dd0000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bb5555555555555555555555555555bb55bbbbbbbbbbbbbbbbbbbbbbbbbbbb550000000000000000000000000000000000000000000000000000000000000000
bbbb555555555555555555555555bbbb5555bbbbbbbbbbbbbbbbbbbbbbbb55550000000000000000000000000000000000000000000000000000000000000000
bbbbbb55555555555555555555bbbbbb555555bbbbbbbbbbbbbbbbbbbb5555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb5555555555555555bbbbbbbb55555555bbbbbbbbbbbbbbbb555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbb555555555555bbbbbbbbbb5555555555bbbbbbbbbbbb55555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbb55555555bbbbbbbbbbbb555555555555bbbbbbbb5555555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbb5555bbbbbbbbbbbbbb55555555555555bbbb555555555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66660000000000000000000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55666600000000000000000000666655000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55556666000000000000000066665555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555566660000000000006666555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5555555566660000000066665555555555bbbbbbbbbbbbbbbbbbbbbbbbbbbb550000000000000000000000000000000000000000000000000000000000000000
bb5555555566660000666655555555bb5555bbbbbbbbbbbbbbbbbbbbbbbb55550000000000000000000000000000000000000000000000000000000000000000
bbbb555555556666666655555555bbbb555555bbbbbbbbbbbbbbbbbbbb5555550000000000000000000000000000000000000000000000000000000000000000
bbbbbb55555555666655555555bbbbbb55555555bbbbbbbbbbbbbbbb555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbb5555555555555555bbbbbbbb5555555555bbbbbbbbbbbb55555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbb555555555555bbbbbbbbbb555555555555bbbbbbbb5555555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbb55555555bbbbbbbbbbbb55555555555555bbbb555555555555550000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbb5555bbbbbbbbbbbbbb555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
01110000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1777100011711777000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
177110001777111700aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
17171000717171170a0a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0111100011711117000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001171111700a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001177777700a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
